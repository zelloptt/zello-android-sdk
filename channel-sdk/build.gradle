import org.jetbrains.dokka.gradle.DokkaTask

plugins {
	id 'com.android.library'
	id 'kotlin-android'
	id 'org.jetbrains.dokka'
	id 'maven-publish'
	id 'signing'
}

android {
	compileSdkVersion 31
	defaultConfig {
		minSdkVersion 21
		targetSdkVersion 31
		ndkVersion = "24.0.8215888"
		versionCode 1
		versionName "0.5.6"
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
	}
	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}
	externalNativeBuild {
		ndkBuild {
			path 'src/main/cpp/Android.mk'
		}
	}
	android.libraryVariants.all { variant ->
		variant.outputs.all {
			outputFileName = "${variant.name}/zello-${archivesBaseName}.aar"
		}
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_11
		targetCompatibility JavaVersion.VERSION_11
	}
	kotlinOptions {
		jvmTarget = JavaVersion.VERSION_11
		freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
		freeCompilerArgs += "-Xjvm-default=enable"
	}

	// Library for testing
	useLibrary 'android.test.mock'
	buildToolsVersion '32.0.0'
}

task sdkDocumentation(type: DokkaTask) {
	dokkaSourceSets {
		named("main") {
			perPackageOption {
				matchingRegex.set("com.zello.channel.sdk.platform")
				suppress.set(true)
			}
			includeNonPublic.set(false)
			skipEmptyPackages(true)
			// To make sure we didn't miss anything
			reportUndocumented(true)
			skipDeprecated(true)
		}
	}
}

task sourcesJar(type: Jar) {
	from(android.sourceSets.main.java.srcDirs)
	archiveClassifier.set('sources')
}

task javadocJar(type: Jar) {
	dependsOn(sdkDocumentation)
	from(sdkDocumentation.outputDirectory)
	archiveClassifier.set('javadoc')
}

afterEvaluate {
	publishing {
		publications {
			channelsSdk(MavenPublication) {
			from components.release
				artifact sourcesJar
				artifact javadocJar

				groupId 'com.zello'
				artifactId 'zello-channel-sdk'
				version android.defaultConfig.versionName

				pom {
					packaging = "aar"
					name = "Zello Channels SDK"
					description = "The Zello Channels SDK allows you to integrate Zello push-to-talk into your own application. The SDK communicates with a Zello server over a web socket connection using a JSON-based protocol, and offers a simple API to send and receive audio, images, and text over Zello channels. Supported features include: Send voice messages from the device microphone Play incoming voice messages through the device speaker Send voice messages from your own audio code, e.g. from a file Receive voice message data with your own audio code with optional pass-through to the device speaker Send and recieve text messages Send and receive images Send the device's current location, and receive location messages from other users The protocol specification is also available if you prefer to develop your own client in-house."
					url = "https://github.com/zelloptt/zello-channel-api/"
					licenses {
						license {
							name = "MIT License"
							url = "http://www.opensource.org/licenses/mit-license.php"
						}
					}
					developers {
						developer {
							name = "Greg Cooksey"
							email = "greg@zello.com"
							organization = "Zello"
							organizationUrl = "https://zello.com/"
						}
					}
					scm {
						connection = "scm:git:git://github.com/zelloptt/zello-channel-api.git"
						url = "https://github.com/zelloptt/zello-channel-api/tree/master"
					}
				}
			}

		}

	repositories {
		maven {
			name = "sonatype"
			// Check if the version name includes the SNAPSHOT suffix, i.e. "0.6.0 SNAPSHOT"
			url = android.defaultConfig.versionName.endsWith('SNAPSHOT') ? "https://s01.oss.sonatype.org/content/repositories/snapshots" : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
			credentials {
				Properties properties = new Properties()
				properties.load(project.rootProject.file('local.properties').newDataInputStream())

				username = findProperty("ossrhUsername")
				password = findProperty("ossrhPassword")
			}
		}
	}

		// Uncomment mavenLocal definition for development
//		repositories {
//			mavenLocal()
//		}
	}

	signing {
		def signingKey = findProperty("ossrhSigningKey")
		def password = findProperty("ossrhSigningPassword")
		useInMemoryPgpKeys(signingKey, password)

		sign publishing.publications.channelsSdk
	}
}

dependencies {
	implementation "androidx.appcompat:appcompat:1.4.2"
	implementation "com.squareup.okhttp3:okhttp:4.9.3"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
	testImplementation "junit:junit:4.13.2"
	androidTestImplementation "androidx.test.ext:junit:1.1.3"
	androidTestImplementation "androidx.test:runner:1.4.0"
	androidTestImplementation "androidx.test:rules:1.4.0"
}
